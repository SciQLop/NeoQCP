/*! \mainpage %QCustomPlot 1.3.2 Documentation

  \image html qcp-doc-logo.png
  
  Below is a brief overview of different aspects of data visualization with QCustomPlot. If you are
  new to QCustomPlot and just want to start using it, it's recommended to look at the tutorials and
  examples at
 
  http://www.qcustomplot.com/
 
  This documentation is especially helpful as a reference, when you're familiar with the basic
  concept of how to use %QCustomPlot and you wish to learn more about specific functionality.
  See the \ref classoverview "class overview" for diagrams explaining the relationships between
  the most important classes of the QCustomPlot library.

  \section mainpage-plottables Plottables
  
  \a Plottables are classes that display any kind of data inside the QCustomPlot. They all derive
  from QCPAbstractPlottable. For example, the QCPGraph class is a plottable that displays a graph
  inside the plot with different line styles, scatter styles, filling etc.
  
  Since plotting graphs is such a dominant use case, QCustomPlot has a special interface for
  working with QCPGraph plottables, that makes it very easy to handle them:\n A new graph can be
  created with QCustomPlot::addGraph and accessed with QCustomPlot::graph.
  
  For all other plottables, the normal plottable interface is used: First, an instance of the
  respective plottable is created and added to the QCustomPlot, e.g.  
  \snippet documentation/doc-code-snippets/mainwindow.cpp qcpcurve-creation-1
  The properties of the newly created plottable can then be accessed via the <tt>newCurve</tt>
  pointer.
  
  Plottables (including graphs) can be retrieved via QCustomPlot::plottable. Since the return type
  of that function is the abstract base class of all plottables, QCPAbstractPlottable, you will
  probably want to <tt>qobject_cast</tt> the returned pointer to the respective plottable subclass.
  As usual, the cast returns zero if the plottable wasn't of that specific subclass.
  
  All further interfacing with plottables (e.g how to set data) is specific to the plottable type.
  See the documentations of the subclasses: QCPGraph, QCPCurve, QCPBars, QCPStatisticalBox,
  QCPColorMap, QCPFinancial.

  \section mainpage-axes Controlling the Axes
  
  QCustomPlot has four default axes: \a xAxis (bottom), \a yAxis (left), \a xAxis2 (top), \a yAxis2
  (right).
  
  Their range is handled by the simple QCPRange class. You can set the range with the
  QCPAxis::setRange function. To change the axis scale type from a linear scale to a logarithmic
  scale, set \ref QCPAxis::setScaleType to \ref QCPAxis::stLogarithmic. The logarithm base can be
  set with \ref QCPAxis::setScaleLogBase.
  
  Each axis can be given an axis label (e.g. "Voltage (mV)") with QCPAxis::setLabel.
  
  By default, an axis automatically creates and labels ticks in a sensible manner. See the
  following functions for tick manipulation:\n QCPAxis::setTicks, QCPAxis::setAutoTicks,
  QCPAxis::setAutoTickCount, QCPAxis::setAutoTickStep, QCPAxis::setTickLabels,
  QCPAxis::setTickLabelType, QCPAxis::setTickLabelRotation, QCPAxis::setTickStep,
  QCPAxis::setTickLength, ...
  
  The distance of an axis backbone to the respective viewport/widget border is called its margin.
  Normally, the margins are calculated automatically to fit the axis and tick labels. To change
  this, set \ref QCPAxisRect::setAutoMargins to exclude the respective margin sides, and set the
  margins manually with \ref QCPAxisRect::setMargins. The main axis rect can be accessed with \ref
  QCustomPlot::axisRect(). A detailed explanation of the different margins/paddings/offset options
  is given in the \ref QCPAxisRect and \ref QCPAxis documentation.
  
  \section mainpage-legend Plot Legend
  
  Every QCustomPlot has one QCPLegend (as \ref QCustomPlot::legend) by default. A legend is a small
  layout element inside the plot which lists the plottables with an icon of the plottable
  line/symbol and a name (QCPAbstractPlottable::setName). Plottables can be added and removed from
  the main legend via \ref QCPAbstractPlottable::addToLegend and \ref
  QCPAbstractPlottable::removeFromLegend. By default, adding a plottable to QCustomPlot
  automatically adds it to the legend, too. This behaviour can be modified with the
  QCustomPlot::setAutoAddPlottableToLegend property.
  
  The QCPLegend provides an interface to access, add and remove legend items directly, too. See
  QCPLegend::item, QCPLegend::itemWithPlottable, QCPLegend::addItem, QCPLegend::removeItem for
  example.
  
  Multiple legends are supported via the \link thelayoutsystem layout system\endlink (since a
  QCPLegend simply is a normal layout element).
  
  \section mainpage-userinteraction User Interaction
  
  QCustomPlot supports dragging axis ranges with the mouse (\ref
  QCPAxisRect::setRangeDrag), zooming axis ranges with the mouse wheel (\ref
  QCPAxisRect::setRangeZoom) and a complete selection mechanism.
  
  The availability of these interactions is controlled with \ref QCustomPlot::setInteractions. For
  details about the interaction system, see the documentation there.
  
  Further, QCustomPlot always emits corresponding signals, when objects are clicked or
  doubleClicked. See \ref QCustomPlot::plottableClick, \ref QCustomPlot::plottableDoubleClick
  and \ref QCustomPlot::axisClick for example.
  
  \section mainpage-items Items
  
  Apart from plottables there is another category of plot objects that are important: Items. The
  base class of all items is \ref QCPAbstractItem. An item sets itself apart from plottables in
  that it's not necessarily bound to any axes. This means it may also be positioned in absolute
  pixel coordinates or placed at a relative position on an axis rect. Further, it usually doesn't
  represent data directly, but acts as decoration, emphasis, description etc.
  
  Multiple items can be arranged in a parent-child-hierarchy allowing for dynamical behaviour. For
  example, you could place the head of an arrow at a fixed plot coordinate, so it always points to
  some important area in the plot. The tail of the arrow can be anchored to a text item which
  always resides in the top center of the axis rect, independent of where the user drags the axis
  ranges. This way the arrow stretches and turns so it always points from the label to the
  specified plot coordinate, without any further code necessary.
  
  For a more detailed introduction, see the \ref QCPAbstractItem documentation, and from there the
  documentations of the individual standard items, to find out how to use them.
  
  \section mainpage-layoutelements Layout Elements and Layouts
  
  QCustomPlot uses an internal layout system to provide dynamic sizing and positioning of objects like
  the axis rect(s), legends and the plot title. They are all based on \ref QCPLayoutElement and are arranged by
  placing them inside a \ref QCPLayout subclass, like \ref QCPLayoutGrid.
  
  See the page about \link thelayoutsystem the layout system\endlink for details.
  
  \section mainpage-performanceimprovement Performance Improvement
  
  See the page about \link performanceimprovement plot performance improvement\endlink.
  
  \section mainpage-flags Preprocessor Define Flags
  
  QCustomPlot understands some preprocessor defines that are useful for debugging and compilation:
  <dl>
  <dt>\c QCUSTOMPLOT_COMPILE_LIBRARY
  <dd>Define this flag when compiling QCustomPlot as a shared library (.so/.dll)
  <dt>\c QCUSTOMPLOT_USE_LIBRARY
  <dd>Define this flag before including the header, when using QCustomPlot as a shared library
  <dt>\c QCUSTOMPLOT_CHECK_DATA
  <dd>If this flag is defined, the QCustomPlot plottables will perform data validity checks on every redraw.
      They will give qDebug output when encountering \e inf or \e nan values (also if silent NaNs are used
      intentionally to create gaps in graphs).
  </dl>
  
  \section mainpage-specialqtflags Using QCustomPlot with special Qt flags
  
  See the page \link specialqtflags Special Qt Flags\endlink if your project uses
  <tt>QT_NO_CAST_FROM_ASCII</tt>, <tt>QT_NO_CAST_TO_ASCII</tt> or <tt>QT_NO_KEYWORDS</tt>.

*/
